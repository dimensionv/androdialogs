// Gradle utility scripts
//
// Script:          mavenPush
// Descriptions:

apply plugin: 'maven'
apply plugin: 'signing'

def File versionPropsFile = file('version.properties')
def Properties versionProps = new Properties()

def File credentialsPropsFile = file(project.rootDir.absolutePath + File.separator + 'credentials.properties')
def Properties credentialProps = new Properties()

if(!(credentialsPropsFile.canRead() && versionPropsFile.canRead())) {
  throw new GradleException("Could not read property files! \n"
      + credentialsPropsFile.getAbsoluteFile() + "\n"
      + versionPropsFile.getAbsoluteFile())
}

versionProps.load(new FileInputStream(versionPropsFile))

def majorVersionCode = versionProps['MAJOR'].toInteger()
def minorVersionCode = versionProps['MINOR'].toInteger()
def hotfixVersionCode = versionProps['HOTFIX'].toInteger()
def buildNr = versionProps['BUILD_NUMBER'].toInteger()
ext.'snapshotBuild' = versionProps['SNAPSHOT_BUILD'].toBoolean()
def versionString = String.format("%d.%d.%d-%d", majorVersionCode, minorVersionCode, hotfixVersionCode, buildNr)

def isReleaseBuild() {
  return !snapshotBuild
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                                               : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                                                : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('NEXUS_USERNAME') ? credentialProps['NEXUS_USER'] : ""
}

def getRepositoryPassword() {
  return hasProperty('NEXUS_PASSWORD') ? credentialProps['NEXUS_PASSWORD'] : ""
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = POM_GROUP_ID
        pom.artifactId = POM_ARTIFACT_ID
        pom.version = versionString

        repository(url: getReleaseRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          name POM_NAME
          packaging POM_PACKAGING
          description POM_DESCRIPTION
          url POM_URL

          scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
          }

          licenses {
            license {
              name POM_LICENCE_NAME
              url POM_LICENCE_URL
              distribution POM_LICENCE_DIST
            }
          }

          developers {
            developer {
              id POM_DEVELOPER_ID
              name POM_DEVELOPER_NAME
            }
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }

    credentialProps.load(new FileInputStream(credentialsPropsFile))
    allprojects {
      ext."signing.secretKeyRingFile" = credentialProps['SIGNING_SECRET_KEY_RING_FILE']
      ext."signing.keyid" = credentialProps['SIGNING_KEY_ID']
      ext."signing.password" = credentialProps['SIGNING_PASSWORD']
    }

    sign configurations.archives
  }

  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }

  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }

  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
  }

  artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
  }
}